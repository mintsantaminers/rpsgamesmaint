{"version":3,"sources":["firebase/firesbaseConfig.js","assets/imgs/Games_Club.png","assets/imgs/matic-logo.png","components/layout/TestLayout.jsx","assets/imgs/rps_card.png","assets/imgs/coming_soon_hover_card.png","assets/imgs/discord_card.png","assets/imgs/twitter_card.png","assets/imgs/fair_play_hover_card.png","assets/imgs/nft_hover_card.png","assets/imgs/rock.gif","assets/imgs/paper.gif","assets/imgs/scissors.gif","assets/imgs/animation.gif","assets/imgs/animations/RockLose.gif","assets/imgs/animations/RockWin.gif","assets/imgs/animations/PaperLose.gif","assets/imgs/animations/PaperWin.gif","assets/imgs/animations/ScissorsLose.gif","assets/imgs/animations/ScissorsWin.gif","assets/imgs/security_card.png","views/status/Maintenance.jsx","components/ui/ScrollToTop.jsx","serviceWorker.jsx","index.jsx"],"names":["app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getFirestore","TestLayout","Mintenance","className","src","RPSAnimation","width","height","alt","ScrollToTop","props","location","useLocation","useEffect","window","scrollTo","children","Boolean","hostname","match","ReactDOM","render","position","reverseOrder","gutter","containerClassName","containerStyle","toastOptions","duration","style","background","color","success","theme","primary","secondary","t","toast","icon","message","type","onClick","dismiss","id","path","element","index","replace","to","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4dAaMA,EAAMC,YAVW,CACnBC,OAAQC,0CACRC,WAAYD,mCACZE,UAAWF,mBACXG,cAAeH,+BACfI,kBAAmBJ,eACnBK,MAAOL,4CACPM,cAAeN,iB,GAIDO,YAAaV,G,2BCdhB,ICAA,ICER,SAASW,IACd,OACE,kCACE,8BACE,cAAC,IAAD,Q,OCNO,ICAA,ICAA,ICAA,ICAA,ICAA,I,qBCAA,ICAA,ICAA,IFAA,IGAA,MAA0B,sCCA1B,ICAA,ICAA,ICAA,ICAA,ICAA,I,+DCAA,I,gBCEA,SAASC,IACtB,OACE,sBAAKC,UAAU,sEAAf,UACE,qBAAKC,IAAKC,EAAcC,MAAM,MAAMC,OAAO,MAAMC,IAAI,wBACrD,mBAAGL,UAAU,4BAAb,mCACA,mBAAGA,UAAU,4BAAb,gDCLN,IASeM,EATK,SAACC,GACjB,IAAMC,EAAWC,cAMjB,OAJAC,qBAAU,WACNC,OAAOC,SAAS,EAAE,KACnB,CAACJ,IAEG,mCAAGD,EAAMM,YCGAC,QACW,cAA7BH,OAAOH,SAASO,UAEe,UAA7BJ,OAAOH,SAASO,UAEhBJ,OAAOH,SAASO,SAASC,MACvB,2D,QCWNC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,EAAD,WACE,cAAC,IAAD,CACEC,SAAS,YACTC,cAAc,EACdC,OAAQ,EACRC,mBAAmB,GACnBC,eAAgB,GAChBvB,UAAU,cACVwB,aAAc,CAEZxB,UAAW,OACXyB,SAAU,IACVC,MAAO,CACLC,WAAY,sBACZC,MAAO,cAGTC,QAAS,CACPJ,SAAU,IACVK,MAAO,CACLC,QAAS,QACTC,UAAW,WApBnB,SAyBG,SAACC,GAAD,OACC,cAAC,IAAD,CAAUC,MAAOD,EAAjB,SACG,gBAAGE,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAAT,OACC,qCACGD,EACAC,EACW,YAAXH,EAAEI,MACD,sBAAMrC,UAAU,cAAcsC,QAAS,kBAAMJ,IAAMK,QAAQN,EAAEO,KAA7D,SAAkE,mBAAGxC,UAAU,uCAO3F,cAAC,IAAD,UAeE,eAAC,IAAD,CAAOyC,KAAK,IAAIC,QAAS,cAAC5C,EAAD,IAAzB,UACE,cAAC,IAAD,CAAO6C,OAAK,EAACD,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,IAAD,CAAUE,SAAO,EAACC,GAAG,oBAOxDC,SAASC,eAAe,SDiCpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0473224b.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getFirestore } from \"firebase/firestore\"\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_FIREBASE_APIKEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTHDOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECTID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGEBUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGINSENDERID,\n    appId: process.env.REACT_APP_FIREBASE_APPID,\n    measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENTID,\n};\n\nconst app = initializeApp(firebaseConfig);\nexport const db = getFirestore(app);","export default __webpack_public_path__ + \"static/media/Games_Club.ced4ab7b.png\";","export default __webpack_public_path__ + \"static/media/matic-logo.9e249e9c.png\";","import React from 'react'\nimport { Outlet } from 'react-router-dom'\nexport function TestLayout() {\n  return (\n    <section>\n      <div>\n        <Outlet />\n      </div>\n    </section>\n  );\n}","export default __webpack_public_path__ + \"static/media/rps_card.332cf756.png\";","export default __webpack_public_path__ + \"static/media/coming_soon_hover_card.541bc800.png\";","export default __webpack_public_path__ + \"static/media/discord_card.adbe4f15.png\";","export default __webpack_public_path__ + \"static/media/twitter_card.71356aef.png\";","export default __webpack_public_path__ + \"static/media/fair_play_hover_card.8b327fc1.png\";","export default __webpack_public_path__ + \"static/media/nft_hover_card.d4194036.png\";","export default __webpack_public_path__ + \"static/media/rock.83f05435.gif\";","export default __webpack_public_path__ + \"static/media/paper.ebb3560e.gif\";","export default __webpack_public_path__ + \"static/media/scissors.6d3f115f.gif\";","export default __webpack_public_path__ + \"static/media/animation.bb39de1d.gif\";","export default __webpack_public_path__ + \"static/media/RockLose.9b3e6bbb.gif\";","export default __webpack_public_path__ + \"static/media/RockWin.d81d089c.gif\";","export default __webpack_public_path__ + \"static/media/PaperLose.575ddc25.gif\";","export default __webpack_public_path__ + \"static/media/PaperWin.0f056330.gif\";","export default __webpack_public_path__ + \"static/media/ScissorsLose.7c23c600.gif\";","export default __webpack_public_path__ + \"static/media/ScissorsWin.1f0a7653.gif\";","export default __webpack_public_path__ + \"static/media/security_card.69c8cac0.png\";","import React from 'react'\nimport RPSAnimation from '../../assets/imgs/animation.gif'\nexport default function Mintenance() {\n  return (\n    <div className='d-flex flex-column justify-content-center align-items-center vh-100'>\n      <img src={RPSAnimation} width=\"240\" height=\"240\" alt=\"Rock-Paper-Scissors\" />\n      <p className='text-center text-white h3'>Sorry, we're down for</p>\n      <p className='text-center text-white h3'>scheduled maintenance right now</p>\n    </div>\n  );\n}\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router';\nconst ScrollToTop = (props) => {\n    const location = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0,0);\n    }, [location]);\n\n    return <>{props.children}</>\n};\nexport default ScrollToTop;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport {\n  BrowserRouter,\n  Route,\n  Routes,\n  Navigate,\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.css'\nimport { Toaster, ToastBar, toast } from 'react-hot-toast';\nimport { MixpanelProvider } from 'react-mixpanel-browser';\nimport { GlobalLayout } from './components/layout/GlobalLayout'\nimport { TestLayout } from './components/layout/TestLayout'\nimport Main from './views/main/Main'\nimport MainAbout from './views/main/components/about/About'\nimport MainProfile from './views/main/components/profile/Profile'\nimport Rps from './views/rps/Rps'\nimport Demo from './views/rps/Demo'\nimport RpsAbout from './views/rps/components/about/About'\nimport Nfts from './views/main/components/nfts/Nfts';\nimport Fairplay from './views/main/components/fairplay/Fairplay';\nimport RefundPolicy from './views/main/refundPolicy/RefundPolicy';\nimport Terms from './views/main/terms/Terms';\nimport Maintenance from './views/status/Maintenance';\nimport ScrollToTop from './components/ui/ScrollToTop';\nimport * as serviceWorker from './serviceWorker'\nimport './index.scss'\n\n\nReactDOM.render(\n  <MixpanelProvider>\n    <BrowserRouter>\n      <ScrollToTop>\n        <Toaster\n          position=\"top-right\"\n          reverseOrder={false}\n          gutter={8}\n          containerClassName=\"\"\n          containerStyle={{}}\n          className='toast-modal'\n          toastOptions={{\n            // Define default options\n            className: 'mt-5',\n            duration: 5000,\n            style: {\n              background: 'rgba(28, 31, 35, 1)',\n              color: 'whitesmoke'\n            },\n            // Default options for specific types\n            success: {\n              duration: 3000,\n              theme: {\n                primary: 'green',\n                secondary: 'black',\n              },\n            },\n          }}\n        >\n          {(t) => (\n            <ToastBar toast={t}>\n              {({ icon, message }) => (\n                <>\n                  {icon}\n                  {message}\n                  {t.type !== 'loading' && (\n                    <span className='toast-close' onClick={() => toast.dismiss(t.id)}><i className='fa-solid fa-xmark fa-lg'></i></span>\n                  )}\n                </>\n              )}\n            </ToastBar>\n          )}\n        </Toaster>\n        <Routes>\n          {/* <Route path=\"/\" element={<GlobalLayout />}>\n            <Route index element={<Main />} />\n            <Route path=\"rps\" element={<Rps />} />\n            <Route path=\"nfts\" element={<Nfts />} />\n            <Route path=\"fair-play\" element={<Fairplay />} />\n            <Route path=\"about\" element={<MainAbout />} />\n            <Route path=\"profile\" element={<MainProfile />} />\n            <Route path=\"refund-policy\" element={<RefundPolicy />} />\n            <Route path=\"terms\" element={<Terms />} />\n            <Route path=\"demo\" element={<Demo />} />\n            <Route path=\"about\" element={<RpsAbout />} />\n            <Route path=\"*\" element={<Navigate replace to=\"/\" />} />\n          </Route> */}\n\n          <Route path=\"/\" element={<TestLayout />}>\n            <Route index element={<Maintenance />} />\n            <Route path=\"*\" element={<Navigate replace to=\"/\" />} />\n          </Route>\n\n        </Routes>\n      </ScrollToTop>\n    </BrowserRouter >\n  </MixpanelProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}